{"ast":null,"code":"import _objectSpread from \"/Users/Ahrabprince/Desktop/APPS/s-i-react/s-i-react/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/Ahrabprince/Desktop/APPS/s-i-react/s-i-react/src/components/Orders.jsx\";\nimport React, { Component } from 'react';\nimport toastr from '../notification/Toastr'; //COMPONENTS\n\nimport Order from './Order';\nimport EditDestination from './EditDestination';\nimport CreateOrder from './CreateOrder';\nexport class Orders extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {\n        orderList: [],\n        showEdit: \"close\",\n        showCreate: \"close\"\n      }\n    };\n\n    this.handleDeleteUpdate = (list, del) => {\n      const deldataCopy = _objectSpread({}, this.state.data);\n\n      deldataCopy.orderList = list;\n      this.setState({\n        data: deldataCopy\n      });\n      const token = sessionStorage.getItem('token');\n      fetch('https://s-i-api.herokuapp.com/api/v1/delete_order/' + del, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: token\n        }\n      }).then(res => {\n        console.log(res);\n        toastr.info('YOU HAVE DELETED ORDER ' + del);\n      }).catch(err => toastr.error('THERE WAS AN ERROR DELETING ORDER ' + del));\n    };\n\n    this.handleDestinationUpdate = ({\n      upDestnAddress,\n      ordId\n    }) => {\n      const copyData = _objectSpread({}, this.state.data);\n\n      const newList = copyData.orderList.map(order => {\n        if (order.order_id === parseInt(ordId)) {\n          order.destination_address = upDestnAddress;\n          return order;\n        } else {\n          return order;\n        }\n      });\n      copyData.orderList = newList;\n      this.setState({\n        data: copyData\n      });\n      const token = sessionStorage.getItem('token');\n      fetch('https://s-i-api.herokuapp.com/api/v1/update_destination', {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        },\n        body: JSON.stringify({\n          upDestnAddress,\n          ordId\n        })\n      }).then(res => {\n        toastr.info('YOU JUST UPDATED DESTINATION ADDRESS OF ORDER  ' + ordId);\n      }).catch(err => toastr.error('THERE WAS AN ERROR UPDATING ORDER ' + ordId));\n    };\n\n    this.handleUpdateOrder = data => {\n      let date = Date.now();\n      let dateObj = new Date(date);\n      let day = dateObj.getDate();\n      let month = dateObj.getMonth();\n      let year = dateObj.getFullYear();\n      let dateString = year + \"-\" + month + \"-\" + day + \"Taaaa \";\n      let id;\n\n      if (this.state.data.orderList.length !== 0) {\n        id = this.state.data.orderList[this.state.data.orderList.length - 1].order_id + 1;\n      } else {\n        id = 1;\n      }\n\n      const dataCopy = _objectSpread({}, this.state.data);\n\n      console.log(data.date);\n      data.date = dateString;\n      const newOrder = {\n        order_id: id,\n        receiver_name: data.receiverName,\n        receiver_phone_no: data.receiverPhoneNumber,\n        pickup_address: data.pickupAddress,\n        destination_address: data.destinationAddress,\n        order_date: data.date,\n        c_location: 'Newly Processed',\n        status: 'InTransit'\n      };\n      const newList = [...dataCopy.orderList];\n      newList.push(newOrder);\n      dataCopy.orderList = newList;\n      console.log(dataCopy);\n      this.setState({\n        data: dataCopy\n      });\n      const token = sessionStorage.getItem('token');\n      data.date = date;\n      fetch('https://s-i-api.herokuapp.com/api/v1/new_order', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        },\n        body: JSON.stringify(data)\n      }).then(res => {\n        console.log(res);\n        toastr.success(\"NEW ORDER ADDED TO ORDER LIST\");\n      }).catch(err => toastr.error('THERE WAS AN ERROR CREATING A NEW ORDER '));\n    };\n\n    this.handleClickCreate = () => {\n      const newData = _objectSpread({}, this.state.data);\n\n      if (newData.showCreate === \"close\") {\n        newData.showCreate = \"open\";\n        this.setState({\n          data: newData\n        });\n      } else if (newData.showCreate === \"open\") {\n        newData.showCreate = \"close\";\n        this.setState({\n          data: newData\n        });\n      }\n    };\n\n    this.handleClickEdit = () => {\n      const newData = _objectSpread({}, this.state.data);\n\n      if (newData.showEdit === \"close\") {\n        newData.showEdit = \"open\";\n        this.setState({\n          data: newData\n        });\n      } else if (newData.showEdit === \"open\") {\n        newData.showEdit = \"close\";\n        this.setState({\n          data: newData\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const token = sessionStorage.getItem('token');\n\n    if (!token) {\n      toastr.warning(\"YOU ARE NOT LOGGED IN\");\n      this.props.history.push('/login');\n    } else if (token) {\n      fetch('https://s-i-api.herokuapp.com/api/v1/order', {\n        headers: {\n          Authorization: token\n        }\n      }).then(res => {\n        return res.json();\n      }).then(data => {\n        if (data.length === 0) {\n          toastr.info('YOUR ORDERS LISTS IS STILL EMPTY');\n        } else {\n          const newData = _objectSpread({}, this.state.data);\n\n          newData.orderList = data;\n          this.setState({\n            data: newData\n          });\n          console.log(this.state);\n        }\n      }).catch(err => toastr.error('THERE WAS AN ERROR GETTING THE PROFILE ORDERS'));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"orders\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"orders-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"LIST OF ORDERS AND DELIVERY DETAILS\"), React.createElement(Order, {\n      orderList: this.state.data.orderList,\n      handleDeleteUpdate: this.handleDeleteUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleClickEdit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"EDIT DESTINATION\"), React.createElement(\"button\", {\n      onClick: this.handleClickCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"CREATE ORDER\"), React.createElement(EditDestination, {\n      show: this.state.data.showEdit,\n      handleDestinationUpdate: this.handleDestinationUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(CreateOrder, {\n      show: this.state.data.showCreate,\n      updateOrder: this.handleUpdateOrder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default Orders;","map":{"version":3,"sources":["/Users/Ahrabprince/Desktop/APPS/s-i-react/s-i-react/src/components/Orders.jsx"],"names":["React","Component","toastr","Order","EditDestination","CreateOrder","Orders","state","data","orderList","showEdit","showCreate","handleDeleteUpdate","list","del","deldataCopy","setState","token","sessionStorage","getItem","fetch","method","headers","Authorization","then","res","console","log","info","catch","err","error","handleDestinationUpdate","upDestnAddress","ordId","copyData","newList","map","order","order_id","parseInt","destination_address","body","JSON","stringify","handleUpdateOrder","date","Date","now","dateObj","day","getDate","month","getMonth","year","getFullYear","dateString","id","length","dataCopy","newOrder","receiver_name","receiverName","receiver_phone_no","receiverPhoneNumber","pickup_address","pickupAddress","destinationAddress","order_date","c_location","status","push","success","handleClickCreate","newData","handleClickEdit","componentDidMount","warning","props","history","json","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport toastr from '../notification/Toastr'\n\n//COMPONENTS\nimport Order from './Order';\nimport EditDestination from './EditDestination';\nimport CreateOrder from './CreateOrder';\n\nexport class Orders extends Component {\n\nstate = { \n    data:{\n        orderList:[],\n        showEdit:\"close\",\n        showCreate:\"close\"\n\n\n    },\n};\n\n\n\ncomponentDidMount(){\nconst token = sessionStorage.getItem('token');\nif(!token){\n    toastr.warning(\"YOU ARE NOT LOGGED IN\");\n    this.props.history.push('/login');\n\n}else if(token){\n\n    fetch('https://s-i-api.herokuapp.com/api/v1/order',{\n\n        headers:{\n            Authorization: token\n        }\n\n    }).then(res=>{return res.json()})\n    .then(data=>{\n        if(data.length === 0){\n\n            toastr.info('YOUR ORDERS LISTS IS STILL EMPTY')\n\n        }else {\n\n            const newData = {...this.state.data};\n            newData.orderList = data;\n            this.setState({\n                data: newData\n            });\n\n            console.log(this.state)\n\n        }\n       \n    }).catch(err=>toastr.error('THERE WAS AN ERROR GETTING THE PROFILE ORDERS'))\n\n\n}\n\n\n};\n\nhandleDeleteUpdate=(list, del)=>{\n\n    const deldataCopy = {...this.state.data};\n    deldataCopy.orderList = list;\n\n    this.setState({\n        data: deldataCopy\n    });\nconst token = sessionStorage.getItem('token');\n\n    fetch('https://s-i-api.herokuapp.com/api/v1/delete_order/'+del,{\n        method:\"DELETE\",\n        headers:{\n        Authorization: token\n        }\n            }).then(res=>{\n                console.log(res)\n                toastr.info('YOU HAVE DELETED ORDER '+ del)\n            }).catch(err=>toastr.error('THERE WAS AN ERROR DELETING ORDER '+ del))\n\n}\n\n\nhandleDestinationUpdate=({upDestnAddress,ordId})=>{\nconst copyData = {...this.state.data};\n    const newList = copyData.orderList.map(order=>{\n    if (order.order_id === parseInt(ordId)){\n        order.destination_address = upDestnAddress;\n            return order\n    }else{\n            return order;\n    }\n    });\n\n    copyData.orderList= newList;\n    this.setState({\n        data: copyData\n    })\n    const token = sessionStorage.getItem('token');\n\n    fetch('https://s-i-api.herokuapp.com/api/v1/update_destination',{\n                        method:\"PUT\",\n                        headers:{\n                            \"Content-Type\":\"application/json\",\n                            Authorization: token\n                        },\n                        body:JSON.stringify({upDestnAddress, ordId})\n        })\n        .then(res=>{\n                toastr.info('YOU JUST UPDATED DESTINATION ADDRESS OF ORDER  '+ ordId)\n\n        }).catch(err=>toastr.error('THERE WAS AN ERROR UPDATING ORDER '+ ordId))\n\n\n\n}\n\n\n\nhandleUpdateOrder=(data)=>{\n    let date = Date.now();\n    let dateObj= new Date(date);\n   let day = dateObj.getDate();\n    let month = dateObj.getMonth();\n    let year = dateObj.getFullYear();\n    let dateString = year + \"-\" + month +\"-\" + day+ \"Taaaa \";\n    let id\n    if(this.state.data.orderList.length !== 0){\n         id = this.state.data.orderList[this.state.data.orderList.length - 1].order_id + 1 ;\n    }else{\n        id= 1\n    }\n\n\n    const dataCopy = {...this.state.data};\n    console.log(data.date);\n    data.date= dateString;\n    const newOrder = {\n                order_id: id,\n                receiver_name: data.receiverName,\n                receiver_phone_no: data.receiverPhoneNumber,\n                pickup_address: data.pickupAddress,\n                destination_address: data.destinationAddress,\n                order_date: data.date,\n                c_location:'Newly Processed',\n                status:'InTransit'\n    };\n\n    const newList = [...dataCopy.orderList]\n                    newList.push(newOrder)\n                dataCopy.orderList = newList;\n\n    console.log(dataCopy)\n    this.setState({\n            data: dataCopy\n    })\n    const token = sessionStorage.getItem('token');\n    \n        data.date = date;\n        fetch('https://s-i-api.herokuapp.com/api/v1/new_order',{\n            method:\"POST\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                Authorization: token\n            },\n            body:JSON.stringify(data)\n        })\n            .then(res=>{\n                console.log(res)\n                toastr.success(\"NEW ORDER ADDED TO ORDER LIST\")\n            }).catch(err=>toastr.error('THERE WAS AN ERROR CREATING A NEW ORDER '))\n\n\n}\n\n\n\n\n\n\n\nhandleClickCreate=()=>{\n\n    const newData = {...this.state.data};\n    if(newData.showCreate === \"close\"){\n    newData.showCreate=\"open\";\n    this.setState({\n        data: newData\n    });\n}else if(newData.showCreate === \"open\"){\n    newData.showCreate =\"close\";\n    this.setState({\n        data: newData\n    });\n}\n\n}\n\n\n\n\n\n\nhandleClickEdit=()=>{\n\n    const newData = {...this.state.data};\n    if(newData.showEdit === \"close\"){\n    newData.showEdit=\"open\";\n    this.setState({\n        data: newData\n    });\n}else if(newData.showEdit === \"open\"){\n    newData.showEdit=\"close\";\n    this.setState({\n        data: newData\n    });\n}\n\n}\n\n\n\n  render() {\n    return (\n      <div className=\"orders\">\n            <h3 className=\"orders-title\">LIST OF ORDERS AND DELIVERY DETAILS</h3>\n            <Order orderList={this.state.data.orderList}  handleDeleteUpdate={this.handleDeleteUpdate} />\n            <button onClick={this.handleClickEdit} >EDIT DESTINATION</button>\n            <button  onClick={this.handleClickCreate}>CREATE ORDER</button>\n            <EditDestination  show={this.state.data.showEdit} handleDestinationUpdate={this.handleDestinationUpdate}/>\n            <CreateOrder show={this.state.data.showCreate} updateOrder={this.handleUpdateOrder} />\n        \n            \n      </div>\n    )\n  }\n}\n\nexport default Orders;\n"]},"metadata":{},"sourceType":"module"}