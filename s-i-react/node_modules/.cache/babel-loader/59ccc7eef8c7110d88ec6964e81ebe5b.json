{"ast":null,"code":"import _objectSpread from \"/Users/Ahrabprince/Desktop/APPS/s-i-react/s-i-react/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/Ahrabprince/Desktop/APPS/s-i-react/s-i-react/src/components/AdminComp.jsx\";\nimport React, { Component } from 'react';\nimport toastr from '../notification/Toastr'; //COMPONENTS\n\nimport AdminOrdersList from './AdminOrdersList';\nimport AdminEdit from './AdminEdit'; //STYLES\n\nimport '../styles/AdminComp.css';\n\nclass AdminComp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {\n        togCtrl: \"\",\n        orderList: []\n      }\n    };\n\n    this.handleLocation = data => {\n      console.log(data);\n\n      const dataCopy = _objectSpread({}, this.state.data);\n\n      const newList = dataCopy.orderList.map(order => {\n        if (order.user_email === data.userUpdateId && order.order_id === parseInt(data.toUpdateId)) {\n          order.c_location = data.toUpdateLotn;\n          return order;\n        } else {\n          return order;\n        }\n\n        ;\n      });\n      console.log(newList);\n      dataCopy.orderList = newList;\n      this.setState({\n        data: dataCopy\n      });\n      const adminToken = sessionStorage.getItem('adminToken');\n      fetch('https://s-i-api.herokuapp.com/api/v1/update_location', {\n        method: 'PUT',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: adminToken\n        },\n        body: JSON.stringify(data)\n      }).then(response => {\n        console.log(response);\n        toastr.success(`ORDER ${data.toUpdateId} BY USER ${data.userUpdateId}, LOCATION WAS UPDATED TO ${data.toUpdateLotn}`);\n      });\n    };\n\n    this.handleStatus = data => {\n      console.log(data);\n\n      const dataCopy = _objectSpread({}, this.state.data);\n\n      const newList = dataCopy.orderList.map(order => {\n        if (order.user_email === data.userUpdateId && order.order_id === parseInt(data.toUpdateId)) {\n          order.status = data.toUpdateStatus;\n          return order;\n        } else {\n          return order;\n        }\n\n        ;\n      });\n      console.log(newList);\n      dataCopy.orderList = newList;\n      this.setState({\n        data: dataCopy\n      });\n      const adminToken = sessionStorage.getItem('adminToken');\n      fetch('https://s-i-api.herokuapp.com/api/v1/update_status', {\n        method: 'PUT',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: adminToken\n        },\n        body: JSON.stringify(data)\n      }).then(response => {\n        console.log(response);\n        toastr.success(`ORDER ${data.toUpdateId} BY USER ${data.userUpdateId}, STATUS WAS UPDATED TO ${data.toUpdateStatus}`);\n      });\n    };\n  }\n\n  componentDidMount() {\n    const adminToken = sessionStorage.getItem('adminToken');\n\n    if (!adminToken) {\n      toastr.warning(\"CAN'T FIND ADMIN CREDENTIALS !!!\");\n      this.props.history.push('/login');\n    } else {\n      fetch('https://s-i-api.herokuapp.com/api/v1/admin_orders', {\n        headers: {\n          Authorization: adminToken\n        }\n      }).then(res => {\n        return res.json();\n      }).then(data => {\n        const datacopy = _objectSpread({}, this.state.data);\n\n        datacopy.orderList = data;\n        this.setState({\n          data: datacopy\n        });\n        console.log(this.state);\n      }).catch(err => {\n        toastr.error('ERROR FETCHING THE ORDERS LISTS');\n      });\n    }\n\n    ;\n  }\n\n  render() {\n    if (this.state.data.orderList.length !== 0) {\n      return React.createElement(\"div\", {\n        className: \"admin_comp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"all_orders_title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"ALL ORDERS LIST WITH CORRESPONDING USER\"), React.createElement(AdminOrdersList, {\n        orders_list: this.state.data.orderList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), React.createElement(AdminEdit, {\n        handleLocation: this.handleLocation,\n        handleStatus: this.handleStatus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"admin_comp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"all_orders_title\",\n        style: {\n          color: '#fff'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"FETCHING  ALL ORDERS ...........\"));\n    }\n  }\n\n}\n\nexport default AdminComp;","map":{"version":3,"sources":["/Users/Ahrabprince/Desktop/APPS/s-i-react/s-i-react/src/components/AdminComp.jsx"],"names":["React","Component","toastr","AdminOrdersList","AdminEdit","AdminComp","state","data","togCtrl","orderList","handleLocation","console","log","dataCopy","newList","map","order","user_email","userUpdateId","order_id","parseInt","toUpdateId","c_location","toUpdateLotn","setState","adminToken","sessionStorage","getItem","fetch","method","headers","Authorization","body","JSON","stringify","then","response","success","handleStatus","status","toUpdateStatus","componentDidMount","warning","props","history","push","res","json","datacopy","catch","err","error","render","length","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport toastr from '../notification/Toastr' \n\n\n//COMPONENTS\nimport AdminOrdersList from './AdminOrdersList';\nimport AdminEdit from './AdminEdit';\n\n\n//STYLES\nimport '../styles/AdminComp.css'\n\nclass AdminComp extends Component {\n\n    state = { \n        data:{\n            togCtrl:\"\",\n            orderList:[]\n    \n        }\n    }\n\n\nhandleLocation = (data)=>{\nconsole.log(data)\n\n        const dataCopy = {...this.state.data};\n        const newList = dataCopy.orderList.map(order=>{\n            if (order.user_email === data.userUpdateId && order.order_id === parseInt(data.toUpdateId)){\n                order.c_location = data.toUpdateLotn\n                return order\n            }else{\n                return order\n            };\n        });\n\n        console.log(newList)\n\n       dataCopy.orderList = newList;\n\n        this.setState({\n            data: dataCopy\n        })\n    \n\nconst adminToken = sessionStorage.getItem('adminToken');\n\n    fetch('https://s-i-api.herokuapp.com/api/v1/update_location',{\n        method:'PUT',\n        headers:{\n            \"Content-Type\":\"application/json\",\n            Authorization: adminToken\n        },\n        body:JSON.stringify(data)\n    }).then((response)=>{\n    console.log(response);\n    toastr.success(`ORDER ${data.toUpdateId} BY USER ${data.userUpdateId}, LOCATION WAS UPDATED TO ${data.toUpdateLotn}`)\n    })\n}\n\nhandleStatus = (data)=>{\n    console.log(data)\n\n    const dataCopy = {...this.state.data};\n    const newList = dataCopy.orderList.map(order=>{\n        if (order.user_email === data.userUpdateId && order.order_id === parseInt(data.toUpdateId)){\n            order.status = data.toUpdateStatus\n            return order\n        }else{\n            return order\n        };\n    });\n\n    console.log(newList)\n\n   dataCopy.orderList = newList;\n\n    this.setState({\n        data: dataCopy\n    });\n    const adminToken = sessionStorage.getItem('adminToken');\n\n    fetch('https://s-i-api.herokuapp.com/api/v1/update_status',{\n                method:'PUT',\n                headers:{\n                    \"Content-Type\":\"application/json\",\n                    Authorization: adminToken\n                },\n                body:JSON.stringify(data)\n    }).then((response)=>{\n        console.log(response);\n        toastr.success(`ORDER ${data.toUpdateId} BY USER ${data.userUpdateId}, STATUS WAS UPDATED TO ${data.toUpdateStatus}`)\n    });\n\n\n}\n\n\n   \ncomponentDidMount(){\n\n    const adminToken = sessionStorage.getItem('adminToken');\n\n    if(!adminToken){\n        toastr.warning(\"CAN'T FIND ADMIN CREDENTIALS !!!\");\n        this.props.history.push('/login')\n    }else {\n\n    fetch('https://s-i-api.herokuapp.com/api/v1/admin_orders',{\n        headers:{\n            Authorization: adminToken\n        }\n\n    })\n        .then(res=>{\n        return res.json();\n    })\n        .then(data=>{\n            const datacopy={...this.state.data};\n                datacopy.orderList=data;\n                this.setState({\n                    data: datacopy\n                })\n            console.log(this.state)\n        })\n        .catch(err=>{toastr.error('ERROR FETCHING THE ORDERS LISTS')})\n};\n}\n\n  render() {\n\n        if(this.state.data.orderList.length !== 0 ){\n\n    return (\n      <div className=\"admin_comp\">\n          <h4 className=\"all_orders_title\">\n              ALL ORDERS LIST WITH CORRESPONDING USER\n          </h4>\n            <AdminOrdersList orders_list={this.state.data.orderList} />\n            <AdminEdit handleLocation={this.handleLocation} handleStatus={this.handleStatus} />\n      </div>\n    )\n        }else{\n\n\n            return (\n                   <div className=\"admin_comp\" >\n                       <h4 className=\"all_orders_title\" style={{color: '#fff'}}>\n                           FETCHING  ALL ORDERS ...........\n                       </h4>\n                   </div>\n            )\n        }\n  }\n  \n}\n\nexport default AdminComp\n"]},"metadata":{},"sourceType":"module"}